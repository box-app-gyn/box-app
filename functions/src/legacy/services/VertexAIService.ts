import { logger } from '../utils/logger';
import { SECURITY_UTILS } from '../../../constants/security';

export interface VertexAIResponse {
  content: string;
  model: string;
  tokens: number;
  processingTime: number;
}

export interface VertexAIRequest {
  message: string;
  context: any;
  temperature?: number;
  maxTokens?: number;
}

export class VertexAIService {
  private projectId: string;
  private location: string;
  private model: string;

  constructor() {
    this.projectId = process.env.GOOGLE_CLOUD_PROJECT || '';
    this.location = 'us-central1';
    this.model = 'gemini-1.5-flash-001';
  }

  async generateResponse(request: VertexAIRequest): Promise<VertexAIResponse> {
    const startTime = Date.now();

    try {
      // Sanitizar e validar inputs
      const sanitizedRequest = this.sanitizeRequest(request);
      
      // Construir prompt com contexto sanitizado
      const prompt = this.buildPrompt(sanitizedRequest.message, sanitizedRequest.context);

      logger.info('Enviando requisi√ß√£o para Vertex AI', {
        messageLength: sanitizedRequest.message.length,
        contextLength: JSON.stringify(sanitizedRequest.context).length,
        temperature: sanitizedRequest.temperature,
        maxTokens: sanitizedRequest.maxTokens
      });

      // Aqui voc√™ implementaria a chamada real para o Vertex AI
      // Por enquanto, vamos simular uma resposta
      const response = await this.simulateVertexAIResponse(prompt, sanitizedRequest);

      const processingTime = Date.now() - startTime;

      logger.info('Resposta do Vertex AI recebida', {
        contentLength: response.content.length,
        processingTime,
        tokens: response.tokens
      });

      return response;

    } catch (error) {
      logger.error('Erro ao gerar resposta do Vertex AI:', error);
      throw new Error(`Erro na IA: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }

  private sanitizeRequest(request: VertexAIRequest): VertexAIRequest {
    // Sanitizar mensagem
    const sanitizedMessage = SECURITY_UTILS.sanitizeString(request.message, 500);
    
    // Sanitizar contexto
    const sanitizedContext = this.sanitizeContext(request.context);
    
    // Validar par√¢metros num√©ricos
    const temperature = this.validateNumber(request.temperature, 0.1, 2.0, 0.7);
    const maxTokens = this.validateNumber(request.maxTokens, 10, 4000, 1000);

    return {
      message: sanitizedMessage,
      context: sanitizedContext,
      temperature,
      maxTokens
    };
  }

  private sanitizeContext(context: any): any {
    if (!context || typeof context !== 'object') {
      return {
        baseContext: '',
        conversationHistory: '',
        currentMessage: '',
        sessionContext: ''
      };
    }

    return {
      baseContext: SECURITY_UTILS.sanitizeString(context.baseContext || '', 1000),
      conversationHistory: SECURITY_UTILS.sanitizeString(context.conversationHistory || '', 2000),
      currentMessage: SECURITY_UTILS.sanitizeString(context.currentMessage || '', 500),
      sessionContext: SECURITY_UTILS.sanitizeString(context.sessionContext || '', 500)
    };
  }

  private validateNumber(value: any, min: number, max: number, defaultValue: number): number {
    if (typeof value !== 'number' || isNaN(value)) {
      return defaultValue;
    }
    return Math.max(min, Math.min(max, value));
  }

  private buildPrompt(message: string, context: any): string {
    const { baseContext, conversationHistory, currentMessage } = context;

    // Template seguro usando template literals com dados j√° sanitizados
    const prompt = `
${baseContext || 'Voc√™ √© o CERRAD√ò Assistant, o assistente virtual oficial do CERRAD√ò INTERBOX 2025.'}

${conversationHistory ? `Hist√≥rico da conversa:
${conversationHistory}

` : ''}Mensagem atual do usu√°rio: ${currentMessage || message}

Voc√™ √© o CERRAD√ò Assistant, o assistente virtual oficial do CERRAD√ò INTERBOX 2025. Voc√™ √© especializado em CrossFit e tem conhecimento profundo sobre o evento.

INFORMA√á√ïES OFICIAIS DO CERRAD√ò INTERBOX 2025:
- Data: 24, 25 e 26 de outubro de 2025
- Local: Pra√ßa C√≠vica, Goi√¢nia - GO
- Alcance: 200km (Goi√¢nia, DF, MG, TO, BA)
- Formato: Times de 4 atletas (2 homens + 2 mulheres) da mesma box
- Categorias: Iniciante, Scale, Amador, Master 145+, Rx
- Inscri√ß√µes: Ainda n√£o abriram (ser√£o anunciadas na comunidade)
- Comunidade: WhatsApp oficial (link ser√° divulgado)
- Audiovisual: Inscri√ß√µes na p√°gina espec√≠fica do site
- Valores: Ser√£o divulgados junto com as inscri√ß√µes

TOM E PERSONALIDADE:
- Use linguagem motivacional e inspiradora
- Referencie "assumir seu chamado" e "hist√≥ria"
- Seja emp√°tico e acolhedor
- Use emojis ocasionalmente para manter o tom amig√°vel
- Sempre mantenha o foco no CERRAD√ò INTERBOX 2025

RESPONDA SEMPRE EM PORTUGU√äS e seja espec√≠fico sobre o evento. Se a pergunta n√£o for sobre o CERRAD√ò, oriente gentilmente para informa√ß√µes sobre o evento.
`;

    return prompt;
  }

  private async simulateVertexAIResponse(prompt: string, request: VertexAIRequest): Promise<VertexAIResponse> {
    // Simula√ß√£o de resposta para desenvolvimento
    // Em produ√ß√£o, substitua por chamada real ao Vertex AI
    
    const responses = [
      "Ol√°! Sou o CERRAD√ò Assistant ü§ñ, seu guia oficial para o maior evento de times da Am√©rica Latina! Como posso te ajudar a assumir seu chamado?",
      "O CERRAD√ò INTERBOX 2025 acontece nos dias 24, 25 e 26 de outubro na Pra√ßa C√≠vica, Goi√¢nia! √â mais que uma competi√ß√£o - √© onde voc√™ escreve sua hist√≥ria! üí™",
      "Para se inscrever, voc√™ precisa formar seu time de 4 atletas (2 homens + 2 mulheres) da mesma box. As inscri√ß√µes ainda n√£o abriram, mas voc√™ pode se preparar! üî•",
      "O evento tem alcance de 200km, cobrindo Goi√¢nia, DF, MG, TO e BA. √â uma competi√ß√£o presencial com ativa√ß√µes digitais - o melhor dos dois mundos! üåü",
      "Temos categorias para todos os n√≠veis: Iniciante, Scale, Amador, Master 145+ e Rx. Aqui n√£o h√° limites, apenas supera√ß√£o! üèÜ",
      "Para o audiovisual, estamos reunindo criadores para cobrir o evento! Se voc√™ trabalha com fotografia, v√≠deo, drone ou m√≠dia, pode se inscrever na p√°gina espec√≠fica. üì∏",
      "O CERRAD√ò vai al√©m da arena - √© sobre comunidade, supera√ß√£o e hist√≥ria. Aqui voc√™ n√£o se inscreve, voc√™ assume seu chamado! ‚ö°"
    ];

    // Simular delay de processamento
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    // Escolher resposta baseada no contexto da mensagem
    let response = responses[Math.floor(Math.random() * responses.length)];
    
    const userMessage = request.message.toLowerCase();
    
    if (userMessage.includes('inscri√ß')) {
      response = "As inscri√ß√µes ainda n√£o abriram, mas voc√™ pode se preparar! üî• Forme seu time de 4 atletas (2 homens + 2 mulheres) da mesma box e comece a treinar junto. O link da comunidade do WhatsApp ser√° divulgado em breve - fique atento √†s nossas redes sociais (@cerradointerbox) para receber as novidades em primeira m√£o! Aqui voc√™ n√£o se inscreve, voc√™ assume seu chamado! üí™";
    } else if (userMessage.includes('data') || userMessage.includes('quando')) {
      response = "O CERRAD√ò INTERBOX 2025 acontece nos dias 24, 25 e 26 de outubro na Pra√ßa C√≠vica, Goi√¢nia! üìÖ Marque na agenda - ser√° o maior evento de times da Am√©rica Latina! √â onde voc√™ escreve sua hist√≥ria e assume seu chamado! ‚ö°";
    } else if (userMessage.includes('local') || userMessage.includes('onde')) {
      response = "O evento ser√° na Pra√ßa C√≠vica, Goi√¢nia - GO! üèõÔ∏è Temos alcance de 200km, cobrindo Goi√¢nia, DF, MG, TO e BA. √â uma competi√ß√£o presencial com ativa√ß√µes digitais - o melhor dos dois mundos! üåü";
    } else if (userMessage.includes('audiovisual') || userMessage.includes('criador')) {
      response = "Estamos reunindo criadores para cobrir o evento! üì∏ Se voc√™ trabalha com fotografia, v√≠deo, drone, podcast ou m√≠dia, pode se inscrever na p√°gina de audiovisual do site. √â uma oportunidade √∫nica de fazer parte da hist√≥ria do CERRAD√ò e capturar momentos √©picos! üé•";
    } else if (userMessage.includes('comunidade') || userMessage.includes('whatsapp') || userMessage.includes('link')) {
      response = "O link da comunidade oficial do WhatsApp ser√° divulgado em breve! üì± Fique atento √†s nossas redes sociais (@cerradointerbox) para receber o convite em primeira m√£o. L√° voc√™ receber√° todas as novidades sobre inscri√ß√µes, treinos e prepara√ß√£o para o evento. √â onde a comunidade CERRAD√ò se conecta! ü§ù";
    } else if (userMessage.includes('categoria') || userMessage.includes('n√≠vel')) {
      response = "Temos categorias para todos os n√≠veis: Iniciante, Scale, Amador, Master 145+ e Rx! üèÜ Cada categoria tem suas especificidades e movimentos. A defini√ß√£o completa ser√° divulgada junto com as inscri√ß√µes. Aqui n√£o h√° limites, apenas supera√ß√£o! üí™";
    } else if (userMessage.includes('time') || userMessage.includes('formar')) {
      response = "Para participar, voc√™ precisa formar seu time de 4 atletas (2 homens + 2 mulheres) da mesma box! ü§ù Comece a treinar junto, fortale√ßa os la√ßos e prepare-se para assumir seu chamado no CERRAD√ò INTERBOX 2025! √â sobre uni√£o, supera√ß√£o e hist√≥ria! üî•";
    } else if (userMessage.includes('valor') || userMessage.includes('pre√ßo') || userMessage.includes('custo')) {
      response = "Os valores das inscri√ß√µes ser√£o divulgados junto com a abertura das inscri√ß√µes! üí∞ Fique atento √†s nossas redes sociais e comunidade para receber as informa√ß√µes em primeira m√£o. O investimento vale cada centavo para fazer parte da maior hist√≥ria do CrossFit! ‚ö°";
    } else if (userMessage.includes('treino') || userMessage.includes('prepara√ß√£o')) {
      response = "A prepara√ß√£o para o CERRAD√ò j√° come√ßou! üí™ Foque em treinos em equipe, melhore sua comunica√ß√£o e fortale√ßa os la√ßos com sua box. O evento vai testar n√£o s√≥ sua for√ßa f√≠sica, mas tamb√©m sua uni√£o como time! üî•";
    }

    return {
      content: response,
      model: this.model,
      tokens: this.estimateTokens(prompt + response),
      processingTime: Date.now() - Date.now() + 1500 // Simular tempo de processamento
    };
  }

  private estimateTokens(text: string): number {
    // Estimativa simples: ~4 caracteres por token
    return Math.ceil(text.length / 4);
  }

  async testConnection(): Promise<boolean> {
    try {
      // Teste simples de conex√£o
      logger.info('Testando conex√£o com Vertex AI...');
      
      // Em produ√ß√£o, implemente teste real
      await this.generateResponse({
        message: "Teste de conex√£o",
        context: { baseContext: "Teste", conversationHistory: "", currentMessage: "Teste", sessionContext: "test" },
        temperature: 0.1,
        maxTokens: 10
      });

      logger.info('‚úÖ Conex√£o com Vertex AI testada com sucesso');
      return true;
    } catch (error) {
      logger.error('‚ùå Erro ao testar conex√£o com Vertex AI:', error);
      return false;
    }
  }

  async getModelInfo(): Promise<any> {
    try {
      return {
        name: this.model,
        projectId: this.projectId,
        location: this.location,
        status: 'active'
      };
    } catch (error) {
      logger.error('Erro ao buscar informa√ß√µes do modelo:', error);
      throw error;
    }
  }
} 