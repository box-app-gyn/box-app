#!/usr/bin/env node

import admin from 'firebase-admin';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Verificar se o arquivo de credenciais existe
const credentialsPath = path.join(__dirname, 'firebase-admin-key.json');

if (!fs.existsSync(credentialsPath)) {
  console.error('‚ùå Arquivo de credenciais n√£o encontrado!');
  console.log('\nüìã Para obter as credenciais:');
  console.log('1. Acesse: https://console.firebase.google.com/project/interbox-app-8d400/settings/serviceaccounts/adminsdk');
  console.log('2. Clique em "Gerar nova chave privada"');
  console.log('3. Baixe o arquivo JSON');
  console.log('4. Renomeie para "firebase-admin-key.json"');
  console.log('5. Coloque na pasta "scripts/"');
  console.log('\n‚ö†Ô∏è  IMPORTANTE: Nunca compartilhe esse arquivo!');
  process.exit(1);
}

// Carregar credenciais do arquivo JSON
const serviceAccount = JSON.parse(fs.readFileSync(credentialsPath, 'utf8'));

// Inicializar Firebase Admin
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  projectId: 'interbox-app-8d400'
});

const db = admin.firestore();

async function resetGamification() {
  try {
    console.log('üîÑ Iniciando reset da gamifica√ß√£o...\n');
    
    // Buscar todos os usu√°rios
    console.log('üìã Buscando usu√°rios...');
    const usersSnapshot = await db.collection('users').get();
    
    if (usersSnapshot.empty) {
      console.log('‚ùå Nenhum usu√°rio encontrado');
      return;
    }
    
    console.log(`‚úÖ Encontrados ${usersSnapshot.size} usu√°rios`);
    
    // Dados padr√£o de gamifica√ß√£o
    const defaultGamification = {
      points: 0,
      level: 1,
      experience: 0,
      achievements: [],
      rewards: [],
      lastActivity: admin.firestore.FieldValue.serverTimestamp(),
      totalActions: 0,
      streak: 0,
      lastStreakDate: null,
      rank: 'Novato',
      badges: [],
      challenges: [],
      leaderboardPosition: null,
      weeklyPoints: 0,
      monthlyPoints: 0,
      totalPointsEarned: 0,
      gamificationEnabled: true,
      preferences: {
        notifications: true,
        sound: true,
        animations: true
      }
    };
    
    let updatedCount = 0;
    let errorCount = 0;
    
    console.log('\nüîÑ Atualizando usu√°rios...');
    
    for (const userDoc of usersSnapshot.docs) {
      try {
        const userId = userDoc.id;
        const userData = userDoc.data();
        
        // Verificar se o usu√°rio tem dados de gamifica√ß√£o
        if (userData.gamification) {
          console.log(`   üîÑ Resetando gamifica√ß√£o para: ${userData.email || userId}`);
          
          await db.collection('users').doc(userId).update({
            gamification: defaultGamification,
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
          });
          
          updatedCount++;
        } else {
          console.log(`   ‚è≠Ô∏è  Usu√°rio sem gamifica√ß√£o: ${userData.email || userId}`);
        }
        
      } catch (error) {
        console.error(`   ‚ùå Erro ao atualizar usu√°rio ${userDoc.id}:`, error.message);
        errorCount++;
      }
    }
    
    // Resetar leaderboard global
    console.log('\nüìä Resetando leaderboard global...');
    try {
      await db.collection('gamification_leaderboard').doc('global').set({
        lastUpdated: admin.firestore.FieldValue.serverTimestamp(),
        topUsers: [],
        totalUsers: 0,
        season: 1,
        seasonStartDate: admin.firestore.FieldValue.serverTimestamp(),
        seasonEndDate: null
      });
      console.log('   ‚úÖ Leaderboard global resetado');
    } catch (error) {
      console.error('   ‚ùå Erro ao resetar leaderboard:', error.message);
    }
    
    // Resetar estat√≠sticas
    console.log('\nüìà Resetando estat√≠sticas...');
    try {
      await db.collection('gamification_stats').doc('global').set({
        totalPointsDistributed: 0,
        totalAchievementsUnlocked: 0,
        totalRewardsClaimed: 0,
        activeUsers: 0,
        lastReset: admin.firestore.FieldValue.serverTimestamp(),
        dailyStats: {},
        weeklyStats: {},
        monthlyStats: {}
      });
      console.log('   ‚úÖ Estat√≠sticas resetadas');
    } catch (error) {
      console.error('   ‚ùå Erro ao resetar estat√≠sticas:', error.message);
    }
    
    // Resumo final
    console.log('\nüéâ RESET CONCLU√çDO!');
    console.log('‚îÄ'.repeat(50));
    console.log(`üìä Resumo:`);
    console.log(`   - Usu√°rios processados: ${usersSnapshot.size}`);
    console.log(`   - Usu√°rios atualizados: ${updatedCount}`);
    console.log(`   - Erros: ${errorCount}`);
    console.log(`   - Leaderboard: Resetado`);
    console.log(`   - Estat√≠sticas: Resetadas`);
    
    if (errorCount === 0) {
      console.log('\n‚úÖ SUCESSO! Todos os dados de gamifica√ß√£o foram zerados!');
      console.log('üöÄ O sistema est√° pronto para iniciar a nova temporada!');
    } else {
      console.log(`\n‚ö†Ô∏è  ATEN√á√ÉO: ${errorCount} usu√°rios n√£o puderam ser atualizados`);
      console.log('üí° Verifique os logs acima para mais detalhes');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  } finally {
    process.exit(0);
  }
}

// Executar reset
resetGamification(); 